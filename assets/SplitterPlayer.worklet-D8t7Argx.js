var T=Object.defineProperty;var L=(h,a,d)=>a in h?T(h,a,{enumerable:!0,configurable:!0,writable:!0,value:d}):h[a]=d;var o=(h,a,d)=>L(h,typeof a!="symbol"?a+"":a,d);(function(){"use strict";var P;const{AudioWorkletProcessor:h}=globalThis,a=(P=class extends h{constructor(e){super(e);o(this,"_disposed",!1);o(this,"_queuedCalls",[]);const n=this.constructor,c={},p={};let s=-1;const f=()=>{this.port.removeEventListener("message",g),this.port.close()},g=async l=>{var m,C;const{id:t,call:i,args:_,value:M,error:y}=l.data;if(i){const B={id:t};try{B.value=await this[i](..._)}catch(A){B.error=A}this.port.postMessage(B),this._disposed&&f()}else y?(m=p[t])==null||m.call(p,y):c[t]&&((C=c[t])==null||C.call(c,M)),delete c[t],delete p[t],r()},r=()=>{if(!this._queuedCalls.length)return;const[{id:l,call:t,args:i}]=this._queuedCalls.splice(0,1);postMessage({id:l,call:t,args:i})},u=(l,...t)=>{const i=s--,_=this._queuedCalls.push({id:i,call:l,args:t}),M=new Promise((y,m)=>{c[i]=y,p[i]=m});return _===1&&r(),M};n.fnNames.forEach(l=>this[l]=(...t)=>u(l,...t)),this.port.start(),this.port.addEventListener("message",g)}},o(P,"fnNames",[]),P),d="__AudioToolkit_SplitterPlayer";globalThis.SharedArrayBuffer||(globalThis.SharedArrayBuffer=ArrayBuffer);const{registerProcessor:x,sampleRate:S}=globalThis;class b extends a{constructor(e){super(e);o(this,"audioBuffer");o(this,"length");o(this,"loop",!1);o(this,"loopRange",[0,1]);o(this,"playing",!1);o(this,"playhead",0);o(this,"destroyed",!1);this.audioBuffer=e.processorOptions.audioBuffer,this.length=this.audioBuffer[0].length,this.loopRange=[0,this.length]}static get parameterDescriptors(){return[]}setLoop(e){this.loop=e,this.setPlayhead(this.playhead)}setLoopRange(e,n){this.loopRange=[e,n],this.setPlayhead(this.playhead)}play(){this.playing=!0}stop(){this.playing=!1}setPlayhead(e){this.playhead=this.loop?Math.max(0,Math.min(this.length,e)):Math.max(this.loopRange[0],Math.min(this.loopRange[1],e))}getPlayhead(){return this.playhead}destroy(){this.destroyed=!0,this._disposed=!0}process(e,n,c){if(this.destroyed)return!1;e[0];const p=Math.max(...n.map(r=>r[0].length))||128;if(!this.playing)return!0;let{playhead:s}=this,f=p,g=0;for(;f>0;){if(this.loop&&s>=this.loopRange[1]&&(s=this.loopRange[0]),!this.loop&&s>=this.length)return s=0,this.stop(),!0;const r=Math.min(this.loop?this.loopRange[1]-s:this.length-s,f);for(let u=0;u<n.length;u++)n[u][0].set(this.audioBuffer[u].subarray(s,s+r),g);f-=r,g+=r,s+=r}return this.playhead=s,!0}}try{x(d,b)}catch(R){console.warn(R)}})();
