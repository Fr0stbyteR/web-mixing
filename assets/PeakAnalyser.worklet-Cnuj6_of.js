var C=Object.defineProperty;var G=(p,u,$)=>u in p?C(p,u,{enumerable:!0,configurable:!0,writable:!0,value:$}):p[u]=$;var h=(p,u,$)=>G(p,typeof u!="symbol"?u+"":u,$);(function(){"use strict";var y;const{AudioWorkletProcessor:p}=globalThis,u=(y=class extends p{constructor(i){super(i);h(this,"_disposed",!1);h(this,"_queuedCalls",[]);const g=this.constructor,l={},e={};let f=-1;const c=()=>{this.port.removeEventListener("message",a),this.port.close()},a=async s=>{var m,M;const{id:o,call:w,args:A,value:b,error:_}=s.data;if(w){const E={id:o};try{E.value=await this[w](...A)}catch(B){E.error=B}this.port.postMessage(E),this._disposed&&c()}else _?(m=e[o])==null||m.call(e,_):l[o]&&((M=l[o])==null||M.call(l,b)),delete l[o],delete e[o],n()},n=()=>{if(!this._queuedCalls.length)return;const[{id:s,call:o,args:w}]=this._queuedCalls.splice(0,1);postMessage({id:s,call:o,args:w})},t=(s,...o)=>{const w=f--,A=this._queuedCalls.push({id:w,call:s,args:o}),b=new Promise((_,m)=>{l[w]=_,e[w]=m});return A===1&&n(),b};g.fnNames.forEach(s=>this[s]=(...o)=>t(s,...o)),this.port.start(),this.port.addEventListener("message",a)}},h(y,"fnNames",[]),y),$=(d,r)=>(d%r+r)%r,L=(d,r=0,i=d.length)=>{const g=d.slice(r,r+i).map(l=>Math.abs(l));return Math.max.apply(Math,g)},S=(d,r,i=0,g=0)=>{const l=d.length,e=r.length,f=Math.min(l,e);let c=0,a=$(i,l)||0,n=$(g,e)||0;for(;c<f;){const t=Math.min(f-c,l-a,e-n),s=n+t;n===0&&s===e?d.set(r,a):d.set(r.subarray(n,s),a),a=(a+t)%l,n=s%e,c+=t}return a},k="__AudioToolkit_PeakAnalyser";globalThis.SharedArrayBuffer||(globalThis.SharedArrayBuffer=ArrayBuffer);const{registerProcessor:P,sampleRate:T}=globalThis;class z{constructor(){h(this,"_sab");h(this,"_$read");h(this,"_$write");h(this,"_$total");this._sab=new SharedArrayBuffer(3*Uint32Array.BYTES_PER_ELEMENT),this._$read=new Uint32Array(this._sab,0,1),this._$write=new Uint32Array(this._sab,4,1),this._$total=new Uint32Array(this._sab,8,1)}get $read(){return this._$read[0]}set $read(r){this._$read[0]=r}get $write(){return this._$write[0]}set $write(r){this._$write[0]=r}get $total(){return this._$total[0]}set $total(r){this._$total[0]=r}get asObject(){return{$write:this._$write,$read:this._$read,$total:this._$total}}}class x extends u{constructor(){super(...arguments);h(this,"destroyed",!1);h(this,"atoms",new z);h(this,"windowSab",[]);h(this,"window",[]);h(this,"peakSinceLastGet",[]);h(this,"_windowSize",1024)}static get parameterDescriptors(){return[{defaultValue:1024,maxValue:2**32,minValue:128,name:"windowSize"}]}get $read(){return this.atoms.$read}set $read(i){this.atoms.$read=i}get $write(){return this.atoms.$write}set $write(i){this.atoms.$write=i}get $total(){return this.atoms.$total}set $total(i){this.atoms.$total=i}getPeak(){const i=this.window.map(g=>L(g,this.$read,this.windowSize));return this.peakSinceLastGet=i,i}getPeakSinceLastGet(){const i=this.peakSinceLastGet;return this.getPeak(),i}destroy(){this.destroyed=!0,this._disposed=!0}get windowSize(){return this._windowSize}set windowSize(i){this._windowSize=~~Math.min(2**32,Math.max(128,i||1024))}process(i,g,l){if(this.destroyed)return!1;const e=i[0];this.windowSize=~~l.windowSize[0];const{windowSize:f}=this;if(this.window.length>e.length&&(this.windowSab.splice(e.length),this.window.splice(e.length)),e.length===0)return!0;const c=Math.max(...e.map(t=>t.length))||128,a=f+T;this.$write%=a,this.$total+=c;let{$write:n}=this;for(let t=0;t<e.length;t++)if(n=this.$write,!this.window[t])this.windowSab[t]=new SharedArrayBuffer(a*Float32Array.BYTES_PER_ELEMENT),this.window[t]=new Float32Array(this.windowSab[t]);else if(this.window[t].length!==a){const s=this.window[t],o=new SharedArrayBuffer(a*Float32Array.BYTES_PER_ELEMENT),w=new Float32Array(o);n=S(w,s,0,n-Math.min(a,s.length)),this.windowSab[t]=o,this.window[t]=w}this.$write=n;for(let t=0;t<e.length;t++){const s=this.window[t],o=e[t].length?e[t]:new Float32Array(c);c>a?n=S(s,o.subarray(c-a),this.$write):n=S(s,o,this.$write)}return this.$write=n,this.$read=$(n-f,a),e.map(t=>L(t)).forEach((t,s)=>{(!this.peakSinceLastGet[s]||t>this.peakSinceLastGet[s])&&(this.peakSinceLastGet[s]=t)}),!0}}try{P(k,x)}catch(d){console.warn(d)}})();
